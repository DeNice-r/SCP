using Microsoft.Office.Interop.Excel;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using System.Windows;
using System.Windows.Input;
using _Excel = Microsoft.Office.Interop.Excel;

namespace Schedule_Calculator_Pro
{
    public partial class Program : System.Windows.Window
    {
        // Оголошуємо всі змінні, які далі потрібно буде використовувати в інших класах:
        public static SortedDictionary<string, Don> don = new SortedDictionary<string, Don>();
        public static SortedDictionary<string, Group> group = new SortedDictionary<string, Group>();
        public static SortedDictionary<string, Subject> subject = new SortedDictionary<string, Subject>();
        public static SortedSet<string> audience = new SortedSet<string>();
        public static List<string> database = new List<string>();
        public static Schedule schedule = new Schedule(); // todo: случай когда у группы 2 препода на 1 предмет
        public static Thread SchedGenThread = new Thread(schedule.Start);

        public Program()
        {
            InitializeComponent();
            SchedGenThread.IsBackground = true;
            var PrimaryFileWorkThread = new Thread(SettingsHandle);
            PrimaryFileWorkThread.Start();
            File.ReadLines(@"file.txt").Count(line => !string.IsNullOrWhiteSpace(line));
        }

        public void MenuAnimate()
        {
            var n = -0.16;
            MenuX.Dispatcher.Invoke(delegate { MenuX.IsDefault = true; });
            if (MenuX.IsVisible)
            {
                Menu.Dispatcher.Invoke(delegate { Menu.Visibility = Visibility.Visible; });
                for (double x = .984; x >= 0; x -= .016)
                {
                    Menu.Dispatcher.Invoke(delegate { Menu.RenderTransform = new System.Windows.Media.RotateTransform(90 * x, 15, 15); Menu.Opacity = 1 - x; });
                    MenuX.Dispatcher.Invoke(delegate { MenuX.RenderTransform = new System.Windows.Media.RotateTransform(90 * x); MenuX.Opacity = x; });
                    MenuMain.Dispatcher.Invoke(delegate { MenuMain.Opacity = x; MenuMain.Margin = new Thickness(MenuMain.Margin.Left + n, MenuMain.Margin.Top, MenuMain.Margin.Right, MenuMain.Margin.Bottom); });
                    MenuFreeDon.Dispatcher.Invoke(delegate { MenuFreeDon.Opacity = x; MenuFreeDon.Margin = new Thickness(MenuFreeDon.Margin.Left + n, MenuFreeDon.Margin.Top, MenuFreeDon.Margin.Right, MenuFreeDon.Margin.Bottom); });
                    MenuFreeAud.Dispatcher.Invoke(delegate { MenuFreeAud.Opacity = x; MenuFreeAud.Margin = new Thickness(MenuFreeAud.Margin.Left + n, MenuFreeAud.Margin.Top, MenuFreeAud.Margin.Right, MenuFreeAud.Margin.Bottom); });
                    MenuSchedule.Dispatcher.Invoke(delegate { MenuSchedule.Opacity = x; MenuSchedule.Margin = new Thickness(MenuSchedule.Margin.Left + n, MenuSchedule.Margin.Top, MenuSchedule.Margin.Right, MenuSchedule.Margin.Bottom); });
                    Thread.Sleep(2);
                }
                MenuX.Dispatcher.Invoke(delegate { MenuX.Visibility = Visibility.Hidden; });
                MenuMain.Dispatcher.Invoke(delegate { MenuMain.Visibility = Visibility.Hidden; });
                MenuFreeDon.Dispatcher.Invoke(delegate { MenuFreeDon.Visibility = Visibility.Hidden; });
                MenuFreeAud.Dispatcher.Invoke(delegate { MenuFreeAud.Visibility = Visibility.Hidden; });
                MenuSchedule.Dispatcher.Invoke(delegate { MenuSchedule.Visibility = Visibility.Hidden; });
            }
            else
            {
                MenuX.Dispatcher.Invoke(delegate { MenuX.Visibility = Visibility.Visible; });
                MenuMain.Dispatcher.Invoke(delegate { MenuMain.Visibility = Visibility.Visible; });
                MenuFreeDon.Dispatcher.Invoke(delegate { MenuFreeDon.Visibility = Visibility.Visible; });
                MenuFreeAud.Dispatcher.Invoke(delegate { MenuFreeAud.Visibility = Visibility.Visible; });
                MenuSchedule.Dispatcher.Invoke(delegate { MenuSchedule.Visibility = Visibility.Visible; });
                for (double x = .016; x <= 1; x += .016)
                {
                    Menu.Dispatcher.Invoke(delegate { Menu.RenderTransform = new System.Windows.Media.RotateTransform(90 * x, 15, 15); Menu.Opacity = 1 - x; });
                    MenuX.Dispatcher.Invoke(delegate { MenuX.RenderTransform = new System.Windows.Media.RotateTransform(90 * x); MenuX.Opacity = x; });
                    MenuMain.Dispatcher.Invoke(delegate { MenuMain.Opacity = x; MenuMain.Margin = new Thickness(MenuMain.Margin.Left - n, MenuMain.Margin.Top, MenuMain.Margin.Right, MenuMain.Margin.Bottom); });
                    MenuFreeDon.Dispatcher.Invoke(delegate { MenuFreeDon.Opacity = x; MenuFreeDon.Margin = new Thickness(MenuFreeDon.Margin.Left - n, MenuFreeDon.Margin.Top, MenuFreeDon.Margin.Right, MenuFreeDon.Margin.Bottom); });
                    MenuFreeAud.Dispatcher.Invoke(delegate { MenuFreeAud.Opacity = x; MenuFreeAud.Margin = new Thickness(MenuFreeAud.Margin.Left - n, MenuFreeAud.Margin.Top, MenuFreeAud.Margin.Right, MenuFreeAud.Margin.Bottom); });
                    MenuSchedule.Dispatcher.Invoke(delegate { MenuSchedule.Opacity = x; MenuSchedule.Margin = new Thickness(MenuSchedule.Margin.Left - n, MenuSchedule.Margin.Top, MenuSchedule.Margin.Right, MenuSchedule.Margin.Bottom); });
                    Thread.Sleep(2);
                }
                Menu.Dispatcher.Invoke(delegate { Menu.Visibility = Visibility.Hidden; });
            }
            MenuX.Dispatcher.Invoke(delegate { MenuX.IsDefault = false; });
        }

        public void NewDonAnimate()
        {
            if (donrelsubjcancel.IsVisible)
            {
                for (double x = .98; x >= 0; x -= .02)
                {
                    donrelsubjname.Dispatcher.Invoke(delegate { donrelsubjname.Opacity = x; });
                    donrelsubjok.Dispatcher.Invoke(delegate { donrelsubjok.Opacity = x; });
                    donrelsubjcancel.Dispatcher.Invoke(delegate { donrelsubjcancel.Opacity = x; });
                    Thread.Sleep(2);
                }
                donrelsubjname.Dispatcher.Invoke(delegate { donrelsubjname.Visibility = Visibility.Hidden; });
                donrelsubjok.Dispatcher.Invoke(delegate { donrelsubjok.Visibility = Visibility.Hidden; });
                donrelsubjcancel.Dispatcher.Invoke(delegate { donrelsubjcancel.Visibility = Visibility.Hidden; });
                donrelsubjname.Dispatcher.Invoke(delegate { donrelsubjname.Text = ""; });
            }
            else
            {
                donrelsubjname.Dispatcher.Invoke(delegate { donrelsubjname.Visibility = Visibility.Visible; });
                donrelsubjok.Dispatcher.Invoke(delegate { donrelsubjok.Visibility = Visibility.Visible; });
                donrelsubjcancel.Dispatcher.Invoke(delegate { donrelsubjcancel.Visibility = Visibility.Visible; });

                for (double x = .2; x < 1; x += .02)
                {
                    donrelsubjname.Dispatcher.Invoke(delegate { donrelsubjname.Opacity = x; });
                    donrelsubjok.Dispatcher.Invoke(delegate { donrelsubjok.Opacity = x; });
                    donrelsubjcancel.Dispatcher.Invoke(delegate { donrelsubjcancel.Opacity = x; });
                    Thread.Sleep(2);
                }
            }
        }

        public void DonAnimate()
        {
            if (donname.IsVisible)
            {
                for (double x = .98; x >= 0; x -= .02)
                {
                    donname.Dispatcher.Invoke(delegate { donname.Opacity = x; });
                    donrelatedsubjects.Dispatcher.Invoke(delegate { donrelatedsubjects.Opacity = x; });
                    deletedon.Dispatcher.Invoke(delegate { deletedon.Opacity = x; });
                    newdonrelsubj.Dispatcher.Invoke(delegate { newdonrelsubj.Opacity = x; });
                    Thread.Sleep(2);
                }
                donname.Dispatcher.Invoke(delegate { donname.Visibility = Visibility.Hidden; donname.Text = ""; });
                donrelatedsubjects.Dispatcher.Invoke(delegate { donrelatedsubjects.Visibility = Visibility.Hidden; donrelatedsubjects.ItemsSource = null; });
                deletedon.Dispatcher.Invoke(delegate { deletedon.Visibility = Visibility.Hidden; });
                newdonrelsubj.Dispatcher.Invoke(delegate { newdonrelsubj.Visibility = Visibility.Hidden; });
            }
            else
            {
                donname.Dispatcher.Invoke(delegate { donname.Visibility = Visibility.Visible; });
                donrelatedsubjects.Dispatcher.Invoke(delegate { donrelatedsubjects.Visibility = Visibility.Visible; });
                deletedon.Dispatcher.Invoke(delegate { deletedon.Visibility = Visibility.Visible; });
                newdonrelsubj.Dispatcher.Invoke(delegate { newdonrelsubj.Visibility = Visibility.Visible; });
                for (double x = .02; x < 1; x += .02)
                {
                    donname.Dispatcher.Invoke(delegate { donname.Opacity = x; });
                    donrelatedsubjects.Dispatcher.Invoke(delegate { donrelatedsubjects.Opacity = x; });
                    deletedon.Dispatcher.Invoke(delegate { deletedon.Opacity = x; });
                    newdonrelsubj.Dispatcher.Invoke(delegate { newdonrelsubj.Opacity = x; });
                    Thread.Sleep(2);
                }
            }
        }

        public void DonRelSubjDelAnimate()
        {
            if (donrelsubjdel.IsVisible)
            {
                for (double x = .98; x >= 0; x -= .02)
                {
                    donrelsubjdel.Dispatcher.Invoke(delegate { donrelsubjdel.Opacity = x; });
                    Thread.Sleep(2);
                }
                donrelsubjdel.Dispatcher.Invoke(delegate { donrelsubjdel.Visibility = Visibility.Hidden; });
            }
            else
            {
                donrelsubjdel.Dispatcher.Invoke(delegate { donrelsubjdel.Visibility = Visibility.Visible; });
                for (double x = .02; x < 1; x += .02)
                {
                    donrelsubjdel.Dispatcher.Invoke(delegate { donrelsubjdel.Opacity = x; });
                    Thread.Sleep(2);
                }
            }
        }

        public void AudAnimate()
        {
            if (auddel.IsVisible)
            {
                for (double x = .98; x >= 0; x -= .02)
                {
                    auddel.Dispatcher.Invoke(delegate { auddel.Opacity = x; });
                    audname.Dispatcher.Invoke(delegate { audname.Opacity = x; });
                    Thread.Sleep(2);
                }
                auddel.Dispatcher.Invoke(delegate { auddel.Visibility = Visibility.Hidden; });
                audname.Dispatcher.Invoke(delegate { audname.Visibility = Visibility.Hidden; });
            }
            else
            {
                audname.Dispatcher.Invoke(delegate { audname.Visibility = Visibility.Visible; });
                auddel.Dispatcher.Invoke(delegate { auddel.Visibility = Visibility.Visible; });
                for (double x = .02; x < 1; x += .02)
                {
                    auddel.Dispatcher.Invoke(delegate { auddel.Opacity = x; });
                    audname.Dispatcher.Invoke(delegate { audname.Opacity = x; });
                    Thread.Sleep(2);
                }
            }
        }

        public static void SettingsHandle()
        {
            //Перевіряємо, чи існує файл з налаштуваннями, відкриваємо його, якщо він є і створюємо у зворотньому випадку.
            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Settings.xlsx"))
                GetSettings();
            else if(File.Exists("RawData.xlsx")){
                CreateSettings();
            }
            else {
                MessageBox.Show("Створіть файл з початковими даними і назвіть його RawData.xlsx");
            }
        }

        private static void GetSettings()
        {
            Excel excelTemp = new Excel(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Settings.xlsx", 1);
            var t = 0;
            while (excelTemp.BReadCell(t, 0))
            {
                var tmp = excelTemp.ReadCell(t, 0);       // преподаватель
                if (!don.ContainsKey(tmp))
                {
                    don.Add(tmp, new Don(tmp));
                }
                if (excelTemp.BReadCell(t, 1))
                {
                    don[tmp].relatedAud = excelTemp.ReadCell(t, 1);
                    audience.Add(excelTemp.ReadCell(t, 1));
                }
                t++;
                while (excelTemp.BReadCell(t, 2))
                {
                    var tmp1 = excelTemp.ReadCell(t, 2);       // предмет
                    if (!subject.ContainsKey(tmp1))
                    {
                        subject.Add(tmp1, new Subject(tmp1));
                    }
                    if (!don[tmp].relatedSubjects.Contains(tmp1))
                        don[tmp].relatedSubjects.Add(tmp1);
                    if (excelTemp.BReadCell(t, 3))
                    {
                        subject[tmp1].relatedAud = excelTemp.ReadCell(t, 3);        // аудитория предмета
                        audience.Add(excelTemp.ReadCell(t, 3));
                    }
                    t++;
                    while (excelTemp.BReadCell(t, 4))
                    {
                        var tmp2 = excelTemp.ReadCell(t, 4);    // группа
                        if (!group.ContainsKey(tmp2))
                        {
                            group.Add(tmp2, new Group(tmp2));
                        }
                        if (!group[tmp2].relatedSubjects.ContainsKey(tmp1))
                        {
                            var tmp3 = "";
                            if (excelTemp.BReadCell(t, 5))
                                tmp3 = excelTemp.ReadCell(t, 5);            // кол-во пар в семестре
                            group[tmp2].SubjValEdit(tmp1, tmp, tmp3);
                        }
                        if (excelTemp.BReadCell(t, 6))
                        {
                            group[tmp2].relatedAud = excelTemp.ReadCell(t, 6);
                            audience.Add(excelTemp.ReadCell(t, 6));
                        }
                        t++;
                    }
                }
            }
            MessageBox.Show(group["А10"].relatedSubjects.ContainsKey("Історія України").ToString());

            var i = 0;

            while (excelTemp.BReadCell(i, 7))
            {
                var tmp = excelTemp.ReadCell(i, 7);
                if (!group.ContainsKey(tmp))
                {
                    group.Add(tmp, new Group(tmp));
                }
                i++;
            }
            i = 0;
            while (excelTemp.BReadCell(i, 8))
            {
                var tmp = excelTemp.ReadCell(i, 8);
                if (!subject.ContainsKey(tmp))
                {
                    subject.Add(tmp, new Subject(tmp));
                }
                i++;
            }
            i = 0;
            while (excelTemp.BReadCell(i, 9))
            {
                var tmp = excelTemp.ReadCell(i, 9);
                if (!group.ContainsKey(tmp))
                {
                    audience.Add(tmp);
                }
                i++;
            }

            while (excelTemp.BReadCell(i, 10))
            {
                var tmp = excelTemp.ReadCell(i, 10);
                
                {
                    group[tmp].StudyingWeeks = Convert.ToInt32(excelTemp.ReadCell(i, 11));
                }
                i++;
            }

            excelTemp.close();
            MessageBox.Show("Done.");
        }

        private static void CreateSettings()
        {
            if (!File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Settings.xlsx"))
            {
                Excel excelTemp = new Excel(System.Reflection.Assembly.GetExecutingAssembly().Location.Replace("\\Schedule Calculator Pro.exe", "\\RawData.xlsx"), 1);

                int it = 1, jt = 0;
                while (excelTemp.BReadCell(it, jt))
                {
                    don.Add(excelTemp.ReadCell(it, jt), new Don(excelTemp.ReadCell(it, jt)));
                    it++;
                }       // Преподаватель

                jt++; it = 1;
                while (excelTemp.BReadCell(it, jt))
                {
                    group.Add(excelTemp.ReadCell(it, jt), new Group(excelTemp.ReadCell(it, jt)));
                    it++;
                }       // Группа

                jt++; it = 1;
                while (excelTemp.BReadCell(it, jt))
                {
                    subject.Add(excelTemp.ReadCell(it, jt), new Subject(excelTemp.ReadCell(it, jt)));
                    it++;
                }       // Предмет

                jt++; it = 1;
                while (excelTemp.BReadCell(it, jt))
                {
                    audience.Add(excelTemp.ReadCell(it, jt));
                    it++;
                }       // Аудитория

                excelTemp.close();
            }
            Excel excelTemp1 = new Excel(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Settings.xlsx");
            List<List<string>> unwritten = new List<List<string>>();
            unwritten.Add(group.Keys.ToList()); unwritten.Add(subject.Keys.ToList()); unwritten.Add(audience.ToList());
            var t = 0;
            for (int j = 0; j < don.Count; j++)
            {
                excelTemp1.WriteToCell(t, 0, don.Keys.ToArray()[j]);
                excelTemp1.WriteToCell(t, 1, don.Values.ToArray()[j].relatedAud);

                if (unwritten[2].Contains(don.Values.ToArray()[j].relatedAud))
                    unwritten[2].Remove(don.Values.ToArray()[j].relatedAud);

                t++;
                for (int k = 0; k < don.Values.ToArray()[j].relatedSubjects.Count; k++)
                {
                    excelTemp1.WriteToCell(t, 2, don.Values.ToArray()[j].relatedSubjects[k]);
                    if (unwritten[1].Contains(don.Values.ToArray()[j].relatedSubjects[k]))
                        unwritten[1].Remove(don.Values.ToArray()[j].relatedSubjects[k]);

                    excelTemp1.WriteToCell(t, 3, subject[don.Values.ToArray()[j].relatedSubjects[k]].relatedAud);

                    if (unwritten[2].Contains(subject[don.Values.ToArray()[j].relatedSubjects[k]].relatedAud))
                        unwritten[2].Remove(subject[don.Values.ToArray()[j].relatedSubjects[k]].relatedAud);
                    t++;
                    for (int g = 0; g < group.Count; g++)
                    {
                        if (group.Values.ToArray()[g].relatedSubjects.ContainsKey(don.Values.ToArray()[j].relatedSubjects[k]))
                        {
                            excelTemp1.WriteToCell(t, 4, group.Keys.ToArray()[g]);
                            if (unwritten[0].Contains(group.Keys.ToArray()[g]))
                                unwritten[0].Remove(group.Keys.ToArray()[g]);

                            excelTemp1.WriteToCell(t, 5, group.Values.ToArray()[g].relatedSubjects[don.Values.ToArray()[j].relatedSubjects[k]][1].ToString());
                            excelTemp1.WriteToCell(t, 6, group.Values.ToArray()[g].relatedAud);

                            if (unwritten[2].Contains(group.Values.ToArray()[g].relatedAud))
                                unwritten[2].Remove(group.Values.ToArray()[g].relatedAud);

                            t++;
                        }
                    }
                }
            }

            for (int i = 0; i < unwritten[0].Count; i++)
            {
                excelTemp1.WriteToCell(i, 7, unwritten[0][i]);
            }
            for (int i = 0; i < unwritten[1].Count; i++)
            {
                excelTemp1.WriteToCell(i, 8, unwritten[1][i]);
            }
            for (int i = 0; i < unwritten[2].Count; i++)
            {
                excelTemp1.WriteToCell(i, 9, unwritten[2][i]);
            }

            var temp1 = group.Keys.ToArray();
            var temp2 = group.Values.ToArray();
            for (int i = 0; i < temp1.Count(); i++)
            {
                excelTemp1.WriteToCell(i, 10, temp1[i]);
                excelTemp1.WriteToCell(i, 11, temp2[i].StudyingWeeks.ToString());
            }

            excelTemp1.SaveAs();
            excelTemp1.close();
        }

        private void SearchHandle(object sender, EventArgs e)
        {
            if (!(don.Keys.ToList().All(x => database.Contains(x)) && group.Keys.ToList().All(x => database.Contains(x)) && subject.Keys.ToList().All(x => database.Contains(x)) && audience.All(x => database.Contains(x))))
            {
                database.RemoveRange(0, database.Count);
                database.AddRange(don.Keys.ToArray());
                database.AddRange(group.Keys.ToArray());
                database.AddRange(subject.Keys.ToArray());
                database.AddRange(audience.ToArray());
            }
            Search.ItemsSource = database.Where(x => x.ToLower().Contains(Search.Text.ToLower())).ToArray();
            Search.IsDropDownOpen = true;
        }

        private void Menu_Click(object sender, RoutedEventArgs e)
        {
            if (!MenuX.IsDefault)
            {
                var Anim = new Thread(MenuAnimate);
                Anim.Start();
            }
        }

        private void Grid_Click(object sender, MouseButtonEventArgs e)
        {
            if (MenuX.IsVisible && !MenuX.IsDefault)
            {
                var temp = new Thread(MenuAnimate);
                temp.Start();
            }
            if (donrelsubjname.IsVisible)
            {
                var temp = new Thread(NewDonAnimate);
                temp.Start();
            }
            var tmp = Mouse.GetPosition(System.Windows.Application.Current.MainWindow);
            if (donrelsubjdel.IsVisible && !(tmp.X >= 300 && tmp.X < 628 && tmp.Y >= 267 && tmp.Y < 345))
            {
                var temp = new Thread(DonRelSubjDelAnimate);
                temp.Start();
            }
        }

        private void Search_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (don.Keys.ToArray().Contains(Search.SelectedItem))
            {
                if (!donname.IsVisible)
                {
                    var temp = new Thread(DonAnimate);
                    temp.Start();
                }
                donrelatedsubjects.ItemsSource= don[Search.SelectedItem.ToString()].relatedSubjects;
                donrelatedsubjects.Columns[0].Width = 320;
                donname.Text = Search.SelectedItem.ToString();
            }
            else if (group.Keys.ToArray().Contains(Search.SelectedItem))
            {

            }
            else if (subject.Keys.ToArray().Contains(Search.SelectedItem))
            {

            }
            else
            {
                if (!audname.IsVisible)
                {
                    var temp = new Thread(AudAnimate);
                    temp.Start();
                }
                audname.Text = Search.SelectedItem.ToString();
            }
        }

        private void Clear_Click(object sender, RoutedEventArgs e)
        {
            Search.Text = "";
            Search.SelectedIndex = -1;
            if (!(don.Keys.ToList().All(x => database.Contains(x)) && group.Keys.ToList().All(x => database.Contains(x)) && subject.Keys.ToList().All(x => database.Contains(x)) && audience.ToList().All(x => database.Contains(x))))
            {
                database.RemoveRange(0, database.Count);
                database.AddRange(don.Keys.ToArray());
                database.AddRange(group.Keys.ToArray());
                database.AddRange(subject.Keys.ToArray());
                database.AddRange(audience.ToArray());
            }
            Search.ItemsSource = database;
            if (donname.IsVisible)
                DonAnimate();
        }

        private void Save_Click(object sender, RoutedEventArgs e)
        {
            var save = new Thread(CreateSettings);
            save.Start();
        }

        private void newdonrelsubj_Click(object sender, RoutedEventArgs e)
        {
            if (!donrelsubjname.IsVisible)
            {
                var temp = new Thread(NewDonAnimate);
                temp.Start();
            }
        }

        private void donrelatedsubjects_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (!donrelsubjdel.IsVisible) {
                var temp = new Thread(DonRelSubjDelAnimate);
                temp.Start();
            }
        }

        private void donrelsubjcancel_Click(object sender, RoutedEventArgs e)
        {
            var temp = new Thread(NewDonAnimate);
            temp.Start();
        }

        private void donrelsubjok_Click(object sender, RoutedEventArgs e)
        {
            if (!don[Search.SelectedItem.ToString()].relatedSubjects.Contains(donrelsubjname.Text))
            {
                donrelatedsubjects.ItemsSource = null;
                don[Search.SelectedItem.ToString()].relatedSubjects.Add(donrelsubjname.Text);
                if (!subject.ContainsKey(donrelsubjname.Text))
                    subject.Add(donrelsubjname.Text, new Subject(donrelsubjname.Text));
                donrelatedsubjects.ItemsSource = don[Search.SelectedItem.ToString()].relatedSubjects;
            }
            var temp = new Thread(NewDonAnimate);
            temp.Start();
        }

        private void deletedon_Click(object sender, RoutedEventArgs e)
        {
            don.Remove(Search.SelectedItem.ToString());
            foreach (var key in group.Keys)
            {
                for (int x = 0; x < group[key].relatedSubjects.Count; x++)
                    if (group[key].relatedSubjects[group[key].relatedSubjects.Keys.ToArray()[x]].Contains(Search.SelectedItem.ToString()))
                    {
                        group[key].relatedSubjects.Remove(group[key].relatedSubjects.Keys.ToArray()[x]);
                        x--;
                    }

            }
            Search.SelectedIndex = -1;
            database.RemoveRange(0, database.Count);
            database.AddRange(don.Keys.ToArray());
            database.AddRange(group.Keys.ToArray());
            database.AddRange(subject.Keys.ToArray());
            database.AddRange(audience.ToArray());
            Search.ItemsSource = database;
            var temp = new Thread(DonAnimate);
            temp.Start();
        }

        private void donrelsubjdel_Click(object sender, RoutedEventArgs e)
        {
            don[Search.SelectedItem.ToString()].relatedSubjects.Remove(donrelatedsubjects.SelectedItem.ToString());
            donrelatedsubjects.ItemsSource = null;
            donrelatedsubjects.ItemsSource = don[Search.SelectedItem.ToString()].relatedSubjects;
            var temp = new Thread(DonRelSubjDelAnimate);
            temp.Start();
        }

        private void schedulegenerate_Click(object sender, RoutedEventArgs e)
        {
            SchedGenThread.Start();
        }

        private void auddel_Click(object sender, RoutedEventArgs e)
        {
            audience.Remove(Search.SelectedItem.ToString());
            var temp = new Thread(AudAnimate);
            temp.Start();
        }
    }

    public class Schedule
    {
        public List<List<List<List<string>>>> schedule { get; set; } = new List<List<List<List<string>>>>();        // Курс > Группа > День > Пара > Преподаватели/Предметы/Аудитории
        public List<List<List<List<string>>>> scheduleFree { get; set; } = new List<List<List<List<string>>>>();        // День > Пара >  Преподаватель/Аудитория
        public Schedule() { }
        private Random rnd = new Random();
        private int begingroup = 0;


        public void Start()
        {
            FreeGen();
            var done = false;
            var gdone = 0;
            var _group = begingroup;
            var assignedCheck = true;
            while (gdone < Program.group.Count)
            {
                MessageBox.Show(gdone.ToString());
                schedule.Add(new List<List<List<string>>>());
                var tempgroup = Program.group.Values.ToArray()[_group];
                List<string> subjectXweek = new List<string>();
                List<string> subjHalves = new List<string>();

                for (int x = 0; x < tempgroup.relatedSubjects.Count; x++)
                {
                    double temp = Convert.ToInt32(tempgroup.relatedSubjects.Values.ToArray()[x][1]) / tempgroup.StudyingWeeks;
                    if (temp - Math.Floor(temp) >= .35 && temp - Math.Floor(temp) <= .65)
                    {
                        subjHalves = new List<string>();
                        temp = Math.Floor(temp);
                    }
                    else if (temp - Math.Floor(temp) > .65 && temp - Math.Floor(temp) <= 1)
                        temp = Math.Ceiling(temp);
                    else
                        temp = Math.Floor(temp);

                    for (int y = 0; y < temp; y++)
                        subjectXweek.Add(tempgroup.relatedSubjects.Keys.ToArray()[x]);
                }
                for (int _day = 0; _day < 5; _day++)
                {
                    schedule[gdone].Add(new List<List<string>>());
                    for (int _couple = 0; _couple < tempgroup.couplesXdayGet(_day); _couple++)
                    {
                        schedule[gdone][_day].Add(new List<string>());
                        var check = false;
                        if (subjHalves.Count >= 2)
                            for (int x = 0; x < subjHalves.Count - 1; x++)
                            {
                                for (int y = x + 1; y < subjHalves.Count; y++)
                                {
                                    if (scheduleFree[_day][_couple][0].Contains(tempgroup.relatedSubjects[subjHalves[x]][0]) &&
                                        scheduleFree[_day][_couple][0].Contains(tempgroup.relatedSubjects[subjHalves[y]][0]) ||
                                        scheduleFree[_day][_couple][0].Contains(tempgroup.relatedSubjects[subjHalves[x]][0] + "/") &&
                                        scheduleFree[_day][_couple][0].Contains(tempgroup.relatedSubjects[subjHalves[y]][0] + "/"))
                                    {
                                        var aud1 = getAud(_day, _couple, tempgroup, subjHalves[x]);
                                        var aud2 = getAud(_day, _couple, tempgroup, subjHalves[y]);
                                        schedule[gdone][_day][_couple].Add(subjHalves[x]);
                                        schedule[gdone][_day][_couple].Add(subjHalves[y]);
                                        schedule[gdone][_day][_couple].Add(tempgroup.relatedSubjects[subjHalves[x]][0]);
                                        schedule[gdone][_day][_couple].Add(tempgroup.relatedSubjects[subjHalves[y]][0]);
                                        schedule[gdone][_day][_couple].Add(aud1);
                                        schedule[gdone][_day][_couple].Add(aud2);

                                        halfObjRem(_day, _couple, 0, tempgroup.relatedSubjects[subjHalves[x]][0]);
                                        halfObjRem(_day, _couple, 0, tempgroup.relatedSubjects[subjHalves[y]][0]);
                                        halfObjRem(_day, _couple, 1, aud1);
                                        halfObjRem(_day, _couple, 1, aud2);
                                        subjHalves.Remove(subjHalves[x]);
                                        subjHalves.Remove(subjHalves[y]);
                                        check = true;
                                        break;
                                    }
                                }
                                if (check)
                                    break;
                            }
                        else if (subjHalves.Count == 1 && _couple == tempgroup.couplesXdayGet(_day) - 1 && (scheduleFree[_day][_couple][0].Contains(tempgroup.relatedSubjects[subjHalves[0]][0]) || scheduleFree[_day][_couple][0].Contains(tempgroup.relatedSubjects[subjHalves[0]][0] + "/")))
                        {
                            var aud = getAud(_day, _couple, tempgroup, subjHalves[0]);

                            schedule[gdone][_day][_couple].Add(subjHalves[0]);
                            schedule[gdone][_day][_couple].Add("");
                            schedule[gdone][_day][_couple].Add(tempgroup.relatedSubjects[subjHalves[0]][0]);
                            schedule[gdone][_day][_couple].Add("");
                            schedule[gdone][_day][_couple].Add(aud);
                            schedule[gdone][_day][_couple].Add("");

                            halfObjRem(_day, _couple, 0, tempgroup.relatedSubjects[subjHalves[0]][0]);
                            halfObjRem(_day, _couple, 1, aud);
                            subjHalves.Clear();
                            check = true;
                        }

                        if (check)
                            continue;

                        List<string> sxwHash = new List<string>(subjectXweek.ToHashSet());
                        assignedCheck = true;
                        for (int x = 0; x < sxwHash.Count; x++)
                        {
                            if (scheduleFree[_day][_couple][0].Contains(tempgroup.relatedSubjects[sxwHash[x]][0]))
                            {
                                var aud = getAud(_day, _couple, tempgroup, sxwHash[x]);
                                schedule[gdone][_day][_couple].Add(sxwHash[x]); // Предмет
                                schedule[gdone][_day][_couple].Add(tempgroup.relatedSubjects[sxwHash[x]][0]); // Преподаватель
                                schedule[gdone][_day][_couple].Add(aud); // Аудитория

                                scheduleFree[_day][_couple][0].Remove(tempgroup.relatedSubjects[sxwHash[x]][0]);
                                scheduleFree[_day][_couple][1].Remove(aud);
                                subjectXweek.Remove(sxwHash[x]);
                                assignedCheck = false;
                                break;
                            }
                        }
                        if (assignedCheck && sxwHash.Count != 0)
                        {
                            begingroup++;
                            if (begingroup == Program.group.Count)
                            {
                                done = true;
                                Save();
                                MessageBox.Show("Schedule generation done.");
                            }
                            break;
                        }
                        else
                            assignedCheck = false;
                    }
                    if (assignedCheck)
                        break;
                }
                if (assignedCheck)
                    break;
                gdone++;
                _group++;
                if (_group == Program.group.Count)
                    _group = 0;

            }
            if (assignedCheck && !done)
            {
                Start();
            }
        }

        private void halfObjRem(int day, int couple, int idx, string obj)
        {
            // Видалення аудиторії/викладача наполовину зі списку вільних. Якщо у викладача вже є пара в цей час 1 раз на тиждень, то він видаляється зі списку вільних повністю.
            if (obj.Contains("/"))
            {
                scheduleFree[day][couple][idx].Remove(obj);
            }
            else
            {
                scheduleFree[day][couple][idx].Remove(obj);
                scheduleFree[day][couple][idx].Add(obj + "/");
            }
        }

        private string getAud(int day, int couple, Group group, string subject)
        {
            // Вибір аудиторії для пари couple в день day в залежності від предмету subject, групи group і викладача. Якщо всі 3 аудиторії зайняті, вибирається випадкова з незайнятих.

            if (Program.subject[subject].relatedAud != "" && (scheduleFree[day][couple][1].Contains(Program.subject[subject].relatedAud) || scheduleFree[day][couple][1].Contains(Program.subject[subject].relatedAud + "/") || Program.subject[subject].relatedAud.Contains("с.з.")))
                return Program.subject[subject].relatedAud;
            else if (group.relatedAud != "" && scheduleFree[day][couple][1].Contains(group.relatedAud))
                return group.relatedAud;
            else if (scheduleFree[day][couple][1].Contains(Program.don[group.relatedSubjects[subject][0]].relatedAud))
                return Program.don[group.relatedSubjects[subject][0]].relatedAud;
            else
                return scheduleFree[day][couple][1][rnd.Next(0, scheduleFree[day][couple][1].Count)];
        }

        private void FreeGen()
        {
            scheduleFree = new List<List<List<List<string>>>>();
            schedule = new List<List<List<List<string>>>>();
            for (int _day = 0; _day < 5; _day++)
            {
                scheduleFree.Add(new List<List<List<string>>>());
                for (int _couple = 0; _couple < 6; _couple++)
                {

                    scheduleFree[_day].Add(new List<List<string>>());
                    scheduleFree[_day][_couple].Add(new List<string>());
                    scheduleFree[_day][_couple][0] = Program.don.Keys.ToList();
                    scheduleFree[_day][_couple].Add(new List<string>());
                    scheduleFree[_day][_couple][1] = Program.audience.ToList();
                }
            }
        }

        private void Save()
        {
            Excel xcl = new Excel(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Розклад.xlsx", 1);
            var col = 0;
            MessageBox.Show(schedule.Count.ToString());
            for (int _group = 0; _group < schedule.Count; _group++)
            {
                xcl.WriteToCell(col, 0, Program.group.Keys.ToArray()[_group]); col++;
                for (int _day = 0; _day < schedule[_group].Count; _day++)
                {
                    xcl.WriteToCell(col, 0, "Day "+(_day+1)); col++;
                    for (int _couple = 0; _couple < schedule[_group][_day].Count; _couple++)
                    {
                        var row = 1;
                        xcl.WriteToCell(col, 0, (_couple+1).ToString());
                        for (int c = 0; c < schedule[_group][_day][_couple].Count; c++)
                        {
                            xcl.WriteToCell(col, row, schedule[_group][_day][_couple][c]); row++;
                        } col++;
                    } col++;
                }col++;
            }
            xcl.Save();
            xcl.close();
        }
    }

    public class Excel
    {
        string path = "";
        public _Application excel = new _Excel.Application();
        public Workbook wb;
        Worksheet ws;
        public Excel(string path)
        {
            this.path = path;
            excel.SheetsInNewWorkbook = 1;
            wb = excel.Workbooks.Add(1);
            ws = wb.Worksheets[1];
        }
        public Excel(string path, int sheet)
        {
            this.path = path;
            wb = excel.Workbooks.Open(path);
            ws = wb.Worksheets[sheet];
        }
        public void close()
        {
            excel.Quit();
            System.Runtime.InteropServices.Marshal.ReleaseComObject(wb);
            System.Runtime.InteropServices.Marshal.ReleaseComObject(excel);
            Kill(path);
        }

        public string ReadCell(int i, int j)
        {
            return Convert.ToString(ws.Cells[i + 1, j + 1].Value2);
        }
        public void WriteToCell(int i, int j, string s)
        {
            ws.Cells[i + 1, j + 1].Value2 = s;
        }
        public void Save()
        {
            wb.Save();
        }
        public void SaveAs()
        {
            if (File.Exists(path))
                File.Delete(path);
            wb.SaveAs(path);
        }
        public bool BReadCell(int i, int j)
        {
            i++; j++;
            if (ws.Cells[i, j].Value2 != null)
                return true;
            else
                return false;
        }

        private static void Kill(string excelFileName) // убиваем процес по имени файла
        {
            var processes = from p in Process.GetProcessesByName("EXCEL") select p;

            foreach (var process in processes)
                if (process.MainWindowTitle == "Microsoft Excel - " + excelFileName)
                    process.Kill();
        }
    }

    public class Don
    {
        public string donName { get; set; }
        public List<string> relatedSubjects { get; set; } = new List<string>();
        public string relatedAud { get; set; } = "";
        public Don(string donName)
        {
            this.donName = donName;
        }
    }

    public class Subject
    {
        public string subjectName { get; set; }
        public List<string> relatedGroups { get; set; } = new List<string>();
        public string relatedAud { get; set; } = "";
        public Subject(string subjectName)
        {
            this.subjectName = subjectName;
        }
        public void AddRelGroup()
        {

        }
    }

    public class Group
    {
        public string groupName { get; set; }
        public string relatedAud { get; set; } = "";
        public Dictionary<string, List<string>> relatedSubjects { get; set; } = new Dictionary<string, List<string>>();
        public int[] couplesXday { get; set; } = { -1, 3, -1, -1, 3 };
        public int StudyingWeeks { get; set; } = 16;
        public Group(string groupName)
        {
            this.groupName = groupName;
            couplesXday[0] = couplesXday[2] = couplesXday[3] = -1;
            couplesXday[1] = couplesXday[4] = 3;
        }
        public void SubjValEdit(string SubjName, string DonName, string SubjValue)
        {
            if (!relatedSubjects.ContainsKey(SubjName))
            {
                relatedSubjects.Add(SubjName, new List<string>() { DonName, SubjValue });
            }
            else
            {
                relatedSubjects[SubjName].Add(DonName);
                relatedSubjects[SubjName][1] = SubjValue;
            }
        }

        public int couplesXdayGet(int day)      // Возвращает кол-во пар для конкретного дня и вызывает их рассчёт, если словарь пуст.
        {
            if (couplesXday.Contains(-1))
                couplesXdayCalc();
            return couplesXday[day];
        }


        public void couplesXdayCalc()            // Рассчёт кол-ва пар на каждый день
        {
            // Важная формула: (relatedSubjects.Sum(x => x.Value) - 3 * StudyingWeeks) / (StudyingWeeks * 4);
            int uncalcdays = 4, modifier = 3 * StudyingWeeks;
            var t1 = couplesXday;
            while (uncalcdays > 0)
            {
                double tmp = (relatedSubjects.Sum(x => Convert.ToInt32(x.Value[1])) - Convert.ToDouble(modifier)) / (Convert.ToDouble(StudyingWeeks) * Convert.ToDouble(uncalcdays));
                if (tmp < Math.Ceiling(tmp))
                {
                    if (tmp <= 3)
                    {
                        for (int x = 0; x < 4; x++)
                            if (t1[x] == -1)
                                couplesXday[x] = 3;
                        break;
                    }
                    if (uncalcdays == 1)
                    {
                        if (t1[0] >= 4 && t1[2] >= 4 && t1[3] >= 4)
                            couplesXday[1] = Convert.ToInt32(Math.Ceiling(tmp));
                        break;
                    }
                    modifier += Convert.ToInt32(Math.Ceiling(tmp)) * StudyingWeeks;
                    couplesXday[Array.IndexOf(couplesXday, -1)] = Convert.ToInt32(Math.Ceiling(tmp));
                    uncalcdays--;
                }
                else
                {
                    for (int x = 0; x < 4; x++)
                        if (couplesXday[x] == -1 || x == 1)
                            couplesXday[x] = Convert.ToInt16(tmp);
                    break;
                }
            }
        }
    }
}